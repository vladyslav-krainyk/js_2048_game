{"version":3,"sources":["scripts/main.js"],"names":["controls","document","querySelector","startButton","messageStart","messageWin","messageLose","gameScore","cells","querySelectorAll","restartButton","createElement","textContent","setAttribute","append","board","isStart","score","ROW_SIZE","COL_SIZE","updateCells","i","length","cell","value","flat","oldValue","classList","remove","add","checkLose","addTile","emptyTiles","r","c","push","row","col","randomIndex","randomTile","Math","floor","random","randomValue","filterZero","filter","moveCells","newRow","moveLeft","moveRight","reverse","moveUp","moveDown","canAddTile","originalBoard","copiedBoard","addEventListener","toggle","e","newBoard","JSON","parse","stringify","key","preventDefault"],"mappings":"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","file":"main.f52e7580.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst controls = document.querySelector('.controls');\nconst startButton = document.querySelector('.start');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst gameScore = document.querySelector('.game-score');\nconst cells = document.querySelectorAll('.field-cell');\nconst restartButton = document.createElement('button');\n\nrestartButton.textContent = 'Restart';\nrestartButton.setAttribute('class', 'button restart hidden');\n\ncontrols.append(restartButton);\n\nlet board = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\nlet isStart = false;\nlet score = 0;\n\nconst ROW_SIZE = 4;\nconst COL_SIZE = 4;\n\nstartButton.addEventListener('click', () => {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n  score = 0;\n  gameScore.textContent = score;\n\n  startButton.classList.add('hidden');\n  restartButton.classList.remove('hidden');\n  messageStart.classList.add('hidden');\n  isStart = true;\n\n  addTile();\n  addTile();\n\n  updateCells();\n});\n\nrestartButton.addEventListener('click', () => {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n  score = 0;\n  gameScore.textContent = score;\n\n  messageLose.classList.toggle('hidden', true);\n  messageWin.classList.toggle('hidden', true);\n  isStart = true;\n\n  addTile();\n  addTile();\n\n  updateCells();\n});\n\nfunction updateCells() {\n  for (let i = 0; i < cells.length; i++) {\n    const cell = cells[i];\n    const value = board.flat()[i];\n    const oldValue = cell.textContent;\n\n    if (value === 0) {\n      cell.textContent = '';\n      cell.classList.remove(`field-cell--${oldValue}`);\n    }\n\n    if (value > 0) {\n      cell.textContent = value;\n      cell.classList.remove(`field-cell--${oldValue}`);\n      cell.classList.add(`field-cell--${value}`);\n    }\n\n    if (value === 2048) {\n      messageWin.classList.remove('hidden');\n    }\n  }\n\n  if (checkLose()) {\n    messageLose.classList.remove('hidden');\n  }\n\n  gameScore.textContent = score;\n};\n\nfunction addTile() {\n  const emptyTiles = [];\n\n  for (let r = 0; r < ROW_SIZE; r++) {\n    for (let c = 0; c < COL_SIZE; c++) {\n      if (board[r][c] === 0) {\n        emptyTiles.push({\n          row: r, col: c,\n        });\n      }\n    }\n  }\n\n  const randomIndex = Math.floor(Math.random() * emptyTiles.length);\n  const randomTile = emptyTiles[randomIndex];\n  const randomValue = Math.random() <= 0.1 ? 4 : 2;\n\n  board[randomTile.row][randomTile.col] = randomValue;\n};\n\ndocument.addEventListener('keydown', e => {\n  const newBoard = JSON.parse(JSON.stringify(board));\n\n  if (isStart) {\n    switch (e.key) {\n      case 'ArrowLeft':\n        e.preventDefault();\n        moveLeft();\n        break;\n\n      case 'ArrowRight':\n        e.preventDefault();\n        moveRight();\n        break;\n\n      case 'ArrowUp':\n        e.preventDefault();\n        moveUp();\n        break;\n\n      case 'ArrowDown':\n        e.preventDefault();\n        moveDown();\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  if (canAddTile(board, newBoard)) {\n    addTile();\n  }\n\n  updateCells();\n});\n\nfunction checkLose() {\n  for (let row = 0; row < ROW_SIZE; row++) {\n    for (let col = 0; col < COL_SIZE; col++) {\n      if (board[row][col] === 0) {\n        return false;\n      }\n    }\n  }\n\n  for (let row = 0; row < ROW_SIZE; row++) {\n    for (let col = 0; col < COL_SIZE - 1; col++) {\n      if (board[row][col] === board[row][col + 1]) {\n        return false;\n      }\n    }\n  }\n\n  for (let col = 0; col < COL_SIZE; col++) {\n    for (let row = 0; row < ROW_SIZE - 1; row++) {\n      if (board[row][col] === board[row + 1][col]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n};\n\nfunction filterZero(row) {\n  return row.filter(cell => cell !== 0);\n}\n\nfunction moveCells(row) {\n  let newRow = filterZero(row);\n\n  for (let i = 0; i < newRow.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      score += newRow[i];\n    }\n  }\n\n  newRow = filterZero(newRow);\n\n  while (newRow.length < COL_SIZE) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction moveLeft() {\n  for (let r = 0; r < ROW_SIZE; r++) {\n    let row = board[r];\n\n    row = moveCells(row);\n    board[r] = row;\n  }\n}\n\nfunction moveRight() {\n  for (let r = 0; r < ROW_SIZE; r++) {\n    let row = board[r];\n\n    row = moveCells(row.reverse());\n    board[r] = row.reverse();\n  }\n}\n\nfunction moveUp() {\n  for (let c = 0; c < COL_SIZE; c++) {\n    let row = [];\n\n    for (let r = 0; r < ROW_SIZE; r++) {\n      row.push(board[r][c]);\n    }\n\n    row = moveCells(row);\n\n    for (let r = 0; r < ROW_SIZE; r++) {\n      board[r][c] = row[r];\n    }\n  }\n}\n\nfunction moveDown() {\n  for (let c = 0; c < COL_SIZE; c++) {\n    let row = [];\n\n    for (let r = 0; r < ROW_SIZE; r++) {\n      row.push(board[r][c]);\n    }\n\n    row = moveCells(row.reverse());\n    row.reverse();\n\n    for (let r = 0; r < ROW_SIZE; r++) {\n      board[r][c] = row[r];\n    }\n  }\n}\n\nfunction canAddTile(originalBoard, copiedBoard) {\n  for (let r = 0; r < ROW_SIZE; r++) {\n    for (let c = 0; c < COL_SIZE; c++) {\n      if (originalBoard[r][c] !== copiedBoard[r][c]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n"]}